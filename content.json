{"meta":{"title":"Meteor Blog","subtitle":"","description":"个人博客","author":"Meteor","url":"http://example.com","root":"/"},"pages":[{"title":"","date":"2023-01-06T05:52:00.312Z","updated":"2023-01-06T05:52:00.312Z","comments":true,"path":"archives/index.html","permalink":"http://example.com/archives/index.html","excerpt":"","text":"Directoryarchive_dir: archives"},{"title":"","date":"2023-01-08T03:39:52.058Z","updated":"2023-01-08T03:39:52.058Z","comments":true,"path":"friends/index.html","permalink":"http://example.com/friends/index.html","excerpt":"","text":""},{"title":"所有分类","date":"2023-01-06T05:51:13.984Z","updated":"2023-01-06T05:51:13.984Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"ubuntu配置（三）","slug":"ubuntu配置（三）","date":"2023-01-13T04:14:30.991Z","updated":"2023-01-13T05:55:50.303Z","comments":true,"path":"2023/01/13/ubuntu配置（三）/","link":"","permalink":"http://example.com/2023/01/13/ubuntu%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%89%EF%BC%89/","excerpt":"","text":"目录： 1. 创建容器并配置 2. docker命令与容器命令 1. 创建容器并配置新建容器 sudo docker run -it --rm --runtime nvidia --network host -v /home/user/project:/location/in/container nvcr.io/nvidia/l4t-ml:r35.1.0-py3 安装常用软件 apt-get update apt-get install vim apt-get install git apt-get install net-tools 容器中安装SSH server apt-get install openssh-server 修改sshd_config，开放23端口，并允许密码登录 echo &quot;Port 23&quot;&gt;&gt;/etc/ssh/sshd_config echo &quot;PermitRootLogin yes&quot;&gt;&gt;/etc/ssh/sshd_config 启动ssh服务 service ssh start 先设置容器root用户密码，没有密码外部无法登陆 passwd 安装net-tools工具包 apt install net-tools 查看23端口是否处于监听状态 netstat -ap | grep ssh 使用MobaXterm连接 使用VScode连接 在VScode拓展商店下载ssh 左侧新增加远程资源管理器，打开配置 host自己设置，HostName为IP地址，User为用户名，Port为端口号，设置完后重启VScode 选择在新窗口中连接 选择系统Linux系统，输入密码进入就可以选择文件夹 如果出现连接失败可能是由于ssh权限问题 在*C:\\Users\\administrator*打开.ssh文件的属性 找到并点击“安全”标签；然后点击“高级” 点击“禁用继承” “从此对象中删除所有继承的权限” “确定” 退回到上一级菜单点击编辑按钮，然后单击“添加”以显示“选择用户或组”窗口 单击“高级”，然后单击“立即查找”按钮。选择用户帐户（一般是最下面的一个） 然后一直单击“确定”后，再次关闭并打开VSCode 并尝试连接到远程SSH主机 3. docker命令与容器命令查看存在镜像 sudo docker images 下载镜像 sudo docker pull 删除镜像 sudo docker rmi 新建容器 sudo docker run -it --rm --runtime nvidia --network host -v /home/user/project:/location/in/container nvcr.io/nvidia/l4t-ml:r35.1.0-py3 #-it 使用交互方式进行，进入容器查看内容 #network 网络模式 #-v 挂载文件路径 #镜像名 查看运行中的容器 docker ps 查看所有容器 docker ps -a 退出容器 exit 启动容器 docker start 容器ID 停止容器 docker stop 容器ID 进入容器 docker exec -it 容器ID /bin/bash 删除容器 docker rm 容器ID","categories":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"http://example.com/categories/Ubuntu/"}],"tags":[],"author":"Meteor"},{"title":"ubuntu配置（二）","slug":"ubuntu配置（二）","date":"2023-01-10T07:05:28.379Z","updated":"2023-01-10T07:04:05.635Z","comments":true,"path":"2023/01/10/ubuntu配置（二）/","link":"","permalink":"http://example.com/2023/01/10/ubuntu%E9%85%8D%E7%BD%AE%EF%BC%88%E4%BA%8C%EF%BC%89/","excerpt":"","text":"目录： 1. 安装MobaXterm连接Jetson Nano 2. 安装docker 3. 安装NVIDIA L4T ML镜像 1. 安装MobaXterm连接Jetson Nano方便在使用终端的时候复制命令，安装MobaXterm来在电脑上控制终端 MobaXterm中文版下载地址 https://gitcode.net/mirrors/RipplePiam/MobaXterm-Chinese-Simplified?utm_source=csdn_github_accelerator 点击会话，选择SSH，输入远程主机IP，输入用户名，点击OK 输入密码进入终端 2. 安装dockerdocker官网： https://docs.docker.com/ 选择 Download and install 有各种版本安装方法 打开MobaXterm，在终端中操作 首先卸载旧版本 sudo apt-get remove docker docker-engine docker.io containerd runc 通过repository安装 sudo apt-get update sudo apt-get install \\ ca-certificates \\ curl \\ gnupg \\ lsb-release 添加 docker 的官方 GPG 密钥： sudo mkdir -p /etc/apt/keyrings sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg 设置存储库 echo \\ &quot;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null 安装 docker 引擎 sudo apt-get update sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin 查看docker是否安装成功 输入 docker version root@nvidia-desktop:/home/tjark# docker version Client: Docker Engine - Community Version: 20.10.22 API version: 1.41 Go version: go1.18.9 Git commit: 3a2c30b Built: Thu Dec 15 22:26:57 2022 OS/Arch: linux/arm64 Context: default Experimental: true Server: Docker Engine - Community Engine: Version: 20.10.22 API version: 1.41 (minimum version 1.12) Go version: go1.18.9 Git commit: 42c8b31 Built: Thu Dec 15 22:25:19 2022 OS/Arch: linux/arm64 Experimental: false containerd: Version: 1.6.15 GitCommit: 5b842e528e99d4d4c1686467debf2bd4b88ecd86 runc: Version: 1.1.4 GitCommit: v1.1.4-0-g5fd4c4d docker-init: Version: 0.19.0 GitCommit: de40ad0 测试docker 输入 sudo docker run hello-world root@nvidia-desktop:/home/tjark# sudo docker run hello-world Unable to find image &#39;hello-world:latest&#39; locally latest: Pulling from library/hello-world 7050e35b49f5: Pull complete Digest: sha256:94ebc7edf3401f299cd3376a1669bc0a49aef92d6d2669005f9bc5ef028dc333 Status: Downloaded newer image for hello-world:latest Hello from Docker! This message shows that your installation appears to be working correctly. To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub. (arm64v8) 3. The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it to your terminal. To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bash Share images, automate workflows, and more with a free Docker ID: https://hub.docker.com/ 查看镜像列表 输入 docker images root@nvidia-desktop:/home/tjark# docker images REPOSITORY TAG IMAGE ID CREATED SIZE hello-world latest 46331d942d63 9 months ago 9.14kB 验证后可删除 hello-world root@nvidia-desktop:/home/tjark# sudo docker image rm --force 46331d942d63 Untagged: hello-world:latest Untagged: hello-world@sha256:94ebc7edf3401f299cd3376a1669bc0a49aef92d6d2669005f9 bc5ef028dc333 Deleted: sha256:46331d942d6350436f64e614d75725f6de3bb5c63e266e236e04389820a234c4 root@nvidia-desktop:/home/tjark# docker images REPOSITORY TAG IMAGE ID CREATED SIZE 注意IMAGE ID 3. 安装NVIDIA L4T ML镜像英伟达镜像官网 https://catalog.ngc.nvidia.com/containers?filters=&amp;orderBy=scoreDESC&amp;query=jetson%20nano 找到NVIDIA L4T ML 拉取镜像 sudo docker pull nvcr.io/nvidia/l4t-ml:r35.1.0-py3 查看镜像列表 root@nvidia-desktop:/home/tjark# docker images REPOSITORY TAG IMAGE ID CREATED SIZE nvcr.io/nvidia/l4t-ml r35.1.0-py3 f4b16fe271bf 5 months ago 15.4GB","categories":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"http://example.com/categories/Ubuntu/"}],"tags":[],"author":"Meteor"},{"title":"ubuntu配置（一）","slug":"ubuntu配置（一）","date":"2023-01-09T10:53:31.974Z","updated":"2023-01-09T10:41:46.130Z","comments":true,"path":"2023/01/09/ubuntu配置（一）/","link":"","permalink":"http://example.com/2023/01/09/ubuntu%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%80%EF%BC%89/","excerpt":"","text":"目录： 1. Jetson Nano连接笔记本网络 2. 系统设置中文 3. NumPy入门 4. 集成开发环境介绍 5.Ubuntu换源 6.Jetson Nano扩容 1. Jetson Nano连接笔记本网络设置中点开“网络和Internet”，选择更改适配器选项 点击所连接无线网络的属性 点开共享标签，全部勾上 重启笔记本后可能要取消勾后再勾一次 2. 系统设置中文点击language support 会提示安装语言库，点击install 把汉语（中国）移到最上面 重启系统 3. Ubuntu更改用户名与密码打开终端进入根用户（ctrl+d退出根用户） sudo su 更改根用户密码 passwd root 更改用户密码 passwd nvidia 在根用户下继续输入 gedit /etc/passwd 将文件最下面一行的旧用户名改为新用户名，只改前两个 修改shadow gedit /etc/shadow 将文件最下面一行的旧用户名改为新用户名，只有一个 修改用户权限列表 gedit /etc/sudoers 添加权限 修改用户群组 gedit /etc/group 将文件中旧用户名全改为新用户名 重启 修改主目录 cd /home sudo mv /home/inano /home/U-car sudo vi /etc/passwd 按o进入编辑模式，在最下面修改目录 esc退出编辑模式，输入:w保存，输入:q退出 重启 4.WinSCP文件传输WinSCP官网下载安装 https://winscp.net/eng/download.php 查看nano IP地址 打开WinSCP，新建站点，输入IP地址，用户名密码为之前设置的，点击登录 可以直接传输文件 5.Ubuntu换源终端输入 sudo gedit /etc/apt/sources.list 打开文件后删除原内容更换为 deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic main multiverse restricted universe deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-security main multiverse restricted universe deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-updates main multiverse restricted universe deb http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-backports main multiverse restricted universe deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic main multiverse restricted universe deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-security main multiverse restricted universe deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-updates main multiverse restricted universe deb-src http://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-backports main multiverse restricted universe 更新源 sudo apt-get update 6.Jetson Nano扩容Jetson Nano烧录镜像后容量会变小，需要进行扩容 打开目录*&#x2F;usr&#x2F;lib&#x2F;nvidia&#x2F;resizefs* 在目录下打开终端 输入 sudo su chmod +x nvresizefs.sh .\\nvresizefs.sh","categories":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"http://example.com/categories/Ubuntu/"}],"tags":[],"author":"Meteor"},{"title":"Pyhton安装","slug":"Pyhton安装","date":"2023-01-08T03:33:41.367Z","updated":"2023-01-09T10:41:40.079Z","comments":true,"path":"2023/01/08/Pyhton安装/","link":"","permalink":"http://example.com/2023/01/08/Pyhton%E5%AE%89%E8%A3%85/","excerpt":"","text":"目录： 1. Python介绍 2. python安装 3. NumPy入门 4. 集成开发环境介绍 1. Python介绍：Python由荷兰数学和计算机科学研究学会的吉多·范罗苏姆于1990年代初设计，作为一门叫做ABC语言的替代品。Python提供了高效的高级数据结构，还能简单有效地面向对象编程。Python语法和动态类型，以及解释型语言的本质，使它成为多数平台上写脚本和快速开发应用的编程语言，随着版本的不断更新和语言新功能的添加，逐渐被用于独立的、大型项目的开发。Python解释器易于扩展，可以使用C语言或C++（或者其他可以通过C调用的语言）扩展新的功能和数据类型。Python也可用于可定制化软件中的扩展程序语言。Python丰富的标准库，提供了适用于各个主要系统平台的源码或机器码 （1）. 优点①. Python的语法清晰Python具有清晰的语法结构，大家也把它称作可执行伪代码( executable pseudo-code )。默认安装的Python开发环境已经附带了很多高级数据类型，如列表、元组、字典、集合、队列等，无需进一步编程就可以使用这些数据类型的操作。使用这些数据类型使得实现抽象的数学概念非常简单 ②. 易于操作纯文本文件Python语言处理和操作文本文件非常简单，非常易于处理非数值型数据。Python语言提供了丰富的正则表达式函数以及很多访问Web页面的函数库，使得从HTML中提取数据变得非常简单直观 ③. 使用广泛，存在大量的开发文档Python语言使用广泛，代码范例也很多，便于快速学习和掌握。此外，在开发实际应用程序时，也可以利用丰富的模块库缩短开发周期 SciPy和NumPy等许多科学函数库都实现了向量和矩阵操作，这些函数库增加了代码的可读性 Python的科学工具可以与绘图工具Matplotlib协同工作。Matplotlib可以绘制2D、3D图形，也可以处理科学研究中经常使用到的图形 Python开发环境还提供了交互式shell环境，允许用户开发程序时查看和检测程序内容。 （2）. 缺点Python语言唯一的不足是性能问题。Python程序运行的效率不如Java或者C代码高 2. python安装进入Python的官网，http://www.python.org/download/ ，这里以下载Windows的Python为例 选择下载的版本是3.9.9，点击下载 下载完成后点击运行，会出现安装界面，选择Upgrade Now 出现这个界面就代表安装成功了，点击close 找到python的安装路径，按照各自的安装路径来，Ctrl+C复制这个路径 右键此电脑–&gt;选择属性–&gt;选择高级系统设置–&gt;选择右下角的环境变量 双击Path，将刚才复制的路径粘贴进去 win+R ，输入cmd 回车，输入python，出现Python 3.9.9,说明配置成功 3.NumPy入门正式来说，NumPy是Python的一个矩阵类型，提供了大量矩阵处理的函数。非正式来说，它是一个使运算更容易、执行更迅速的库，因为它的内部运算是通过C语言而不是Python实现的 尽管声称是一个关于矩阵的库，NumPy实际上包含了两种基本的数据类型:数组和矩阵。二者在处理上稍有不同。在使用标准的Python时，处理这两种数据类型均需要循环语句。而在使用NumPy时则可以省去这些语句 安装 NumPy 最简单的方法就是使用 pip 工具 win+R ，输入cmd 回车，输入pip3 install –user numpy scipy matplotlib 4.集成开发环境介绍写 Python 代码最好的方式莫过于使用集成开发环境（IDE）了。它们不仅能使你的工作更加简单、更具逻辑性，还能够提升编程体验和效率 每个人都知道这一点。而问题在于，如何从众多选项中选择最好的 Python 开发环境。初级开发者往往面临这个问题 IDE 是开发者创建程序时使用的软件包。它通过简单的用户界面集成多个高度关联的组件，从而最大化程序员的生产效率。本质上，IDE 是一种改进代码创建、测试和 debug 流程的工具，它使这些工作更加简单 这里推荐两个 Python IDE：VScode与sublime_text （1）. VScodeVisual Studio Code 有时会与 Visual Studio IDE 混淆，后者并非 Python 使用者常用的工具。VS Code 是完整的代码编辑器，具备很多优秀功能，许多程序员称其为最好的 IDE 编辑器 打开VScode的官网：https://code.visualstudio.com/ 点击“Download for xx”旁的下拉按钮，选择与自己电脑系统对应的版本进行下载 安装包下载完成之后，双击安装包开始安装，一直点击“下一步”即可 VScode安装完成之后，双击快捷方式打开，点击此按钮进入“插件市场” 接着在输入框中输入：python，安装Python相关的插件，等待安装完成即可 （2）. sublime_textSublime Text 被认为是最好的 Python 编辑器，因为它简单、通用、方便。它使用广泛，可用于不同的平台 打开Sublime Text官网下载安装包。官网下载链接：http://www.sublimetext.com/3 Windows64位操作系统选择“Windows64bit”，直接点击即可 把安装包下载到电脑上，双击安装包，点击next，注意勾选“Add to explorer context menu”，这是添加右键菜单的选项，就是以后你的一些文档都可以使用sublime text打开，然后继续点击“next”，最后点击“install”，就可以安装了，安装完成后，点击“Finish” （3）. Python举例接下来尝试在Python上使用NumPy库处理数组 新建一个文件test.py使用sublime_text打开并输入代码 from numpy import array if __name__ == &#39;__main__&#39;: mm=array((1,1,1)) pp=array((1,2,3)) print(pp+mm) 可得到结果 [2 3 4] [Finished in 0.7s] 该代码进行了两个数组相加的处理","categories":[{"name":"Python","slug":"Python","permalink":"http://example.com/categories/Python/"}],"tags":[],"author":"Meteor"}],"categories":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"http://example.com/categories/Ubuntu/"},{"name":"Python","slug":"Python","permalink":"http://example.com/categories/Python/"}],"tags":[]}